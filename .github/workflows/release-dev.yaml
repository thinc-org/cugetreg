name: Release - Dev

on:
  push:
    branches:
      - dev
      - yu/breaking/change-monorepo-tools

concurrency: ${{ github.workflow }}-${{ github.ref }}

permissions:
  actions: read
  checks: read
  contents: write
  deployments: read
  issues: write
  discussions: read
  packages: write
  pull-requests: write
  repository-projects: write
  security-events: read
  statuses: write

jobs:
  release:
    name: Release dev

    strategy:
      matrix:
        node-version: [16.17.0]
        os: [ubuntu-latest]

    runs-on: ${{ matrix.os }}

    if: ${{ github.event_name != 'workflow_dispatch' }}

    outputs:
      affectedPackages: ${{ steps.affected-packages.outputs.affectPackages }}

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
        with:
          # related to issue, https://github.com/changesets/action/issues/201
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install pnpm
        uses: pnpm/action-setup@v2.2.2
        id: pnpm-install
        with:
          version: 7
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        run: |
          echo "::set-output name=pnpm_cache_dir::$(pnpm store path)"

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.pnpm_cache_dir }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile --prefer-offline

      - name: Get affected app names
        id: affected-apps
        run: |
          PACKAGES=$(pnpm turbo run build --filter='...[origin/beta]' --dry=json | jq -c '.packages')
          echo "packages=$PACKAGES" >> $GITHUB_OUTPUT
          echo "packages=$PACKAGES"

      - name: Generate affected packages
        id: affected-packages
        run: |
          ITER=0
          PACKAGES='${{ steps.affected-apps.outputs.packages }}'
          for PACKAGE in $(echo "$PACKAGES" | jq -r '.[]' ); do
            if [ "$ITER" = "0" ]; then
              PACKAGES_OUTPUT=$(echo "[{\"name\":\"${PACKAGE}\",\"version\":\"latest\"}")
              ITER=$(expr $ITER + 1)
            else
              PACKAGES_OUTPUT=$(echo "${PACKAGES_OUTPUT},{\"name\":\"${PACKAGE}\",\"version\":\"latest\"}")
            fi
          done
          PACKAGES_OUTPUT="${PACKAGES_OUTPUT}]"
          echo "affectPackages=$PACKAGES_OUTPUT" >> $GITHUB_OUTPUT
          echo "affectPackages=$PACKAGES_OUTPUT"

      - name: Print Debug
        run: echo "${{ steps.affected-packages.outputs.affectPackages }}"

  deploy-with-docker:
    needs:
      - release
    uses: ./.github/workflows/deploy-docker.yaml
    with:
      packages: ${{ needs.release.outputs.affectedPackages }}
      container-registry: ghcr.io
      image-prefix: thinc-org/cugetreg
      username: ${{ github.actor }}
      password: ${{ github.token }}
      # target-repository: ${{ github.repository }}
      # target-ref: main
      # target-directory: k8s-demo
      push: false
      update: false
