name: Build and Deploy

on:
  push:
    branches: [beta, dev, master]

permissions:
  contents: read
  packages: write
  pull-requests: write
  repository-projects: read

env:
  IMAGE_REPO: ghcr.io/${{ github.repository }}

jobs:
  build-and-deploy:
    strategy:
      matrix:
        node-version: [14.x]
        platform: [ubuntu-latest]

    runs-on: ${{ matrix.platform }}

    steps:
      - uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Docker login using Github Token
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Set beta env
        if: ${{ github.ref == 'refs/heads/beta' }}
        run: mv .env.beta .env

      - name: Set dev env
        if: ${{ github.ref == 'refs/heads/dev' }}
        run: mv .env.dev .env

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.IMAGE_REPO }}

      - name: Build and push to GitHub Packages
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.IMAGE_REPO }}:buildcache
          cache-to: type=registry,ref=${{ env.IMAGE_REPO }}:buildcache,mode=max
          context: .

      - name: Connect SSLVPN
        uses: thinc-org/openfortivpn-action@master
        with:
          host: ${{ secrets.SSLVPN_HOST }}
          username: ${{ secrets.SSLVPN_USERNAME }}
          password: ${{ secrets.SSLVPN_PASSWORD }}
          trustedCert: ${{ secrets.SSLVPN_TRUSTED_CERT }}

      - name: Deploy to VM
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            docker pull ${{ env.IMAGE_REPO }}:${{ steps.meta.outputs.version }}
            docker-compose up -d
            if [[ "$(docker images --filter "dangling=true" -q)" == "" ]]; then
              echo "No image with <none> tag"
            else
              docker rmi $(docker images --filter "dangling=true" -q) || true
            fi
