name: Run all checks

on:
  pull_request:
  push:
    # branches: [beta, dev, master]
    branches: [experiment-workflow]

permissions:
  contents: write
  packages: read
  pull-requests: write
  repository-projects: read
  checks: write
  repo: read

jobs:
  install-depedencies:
    strategy:
      matrix:
        node-version: [14.x]
        platform: [ubuntu-latest]
    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v2

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}

      - name: Install dependencies
        if: steps.yarn-cache.outputs.cache-hit != 'true'
        run: yarn --fronzen-lockfile

  test:
    needs: [install-depedencies]
    strategy:
      matrix:
        node-version: [14.x]
        platform: [ubuntu-latest]
    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v2

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}

      - name: Install dependencies
        if: steps.npm-cache.outputs.cache-hit != 'true'
        run: yarn --fronzen-lockfile

      - name: Run linter
        run: yarn lint:ci

      - name: Annotate Code Linting Results
        if: github.event_name == 'pull_request' && always()
        uses: ataylorme/eslint-annotate-action@1.2.0
        with:
          repo-token: '${{ secrets.GITHUB_TOKEN }}'
          report-json: 'eslint_report.json'

      - name: Collect coverage
        run: yarn test:ci

      - name: Get the current branch name
        if: github.event_name == 'push'
        shell: bash
        run: echo "::set-output name=branch::${GITHUB_REF#refs/heads/}"
        id: current
        env:
          GITHUB_REF: ${{ github.ref }}

      - name: Upload coverage to artifact
        if: github.event_name == 'push'
        uses: actions/upload-artifact@v2
        with:
          name: ${{ steps.current.outputs.branch }}
          path: ./report.json

      - name: Download coverage of target branch
        if: github.event_name == 'pull_request'
        id: download
        uses: dawidd6/action-download-artifact@v2
        continue-on-error: true
        with:
          github_token: ${{secrets.GITHUB_TOKEN}}
          workflow: run-checks.yml
          workflow_conclusion: success
          event: push
          name: ${{ github.base_ref }}
          path: ./base-report.json

      - name: Extract code coverage if no base report
        if: github.event_name == 'pull_request' && steps.download.outcome != 'success'
        uses: ArtiomTr/jest-coverage-report-action@v2.0-rc.4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          package-manager: yarn
          annotations: failed-tests
          test-script: yarn test:ci
          coverage-file: ./report.json

      - name: Extract code coverage if have base report
        if: github.event_name == 'pull_request' && steps.download.outcome == 'success'
        uses: ArtiomTr/jest-coverage-report-action@v2.0-rc.4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          package-manager: yarn
          annotations: failed-tests
          test-script: yarn test:ci
          coverage-file: ./report.json
          base-coverage-file: ./base-report.json

  lighthouse:
    needs: [install-depedencies]
    strategy:
      matrix:
        node-version: [14.x]
        platform: [ubuntu-latest]
    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}

      - name: Install dependencies
        if: steps.yarn-cache.outputs.cache-hit != 'true'
        run: yarn --fronzen-lockfile

      - name: Build project
        run: yarn build

      - run: yarn lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
