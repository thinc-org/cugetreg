name: Build and Publish Docker image

on:
  workflow_call:
    inputs:
      packages:
        description: Packages to build and publish
        required: true
        type: string
      environment:
        description: Environment to build and publish e.g. prod, beta, dev
        required: true
        type: string
      container-registry:
        description: Container registry to push the image to
        default: ghcr.io
        type: string
      image-prefix:
        description: Image prefix of the built image
        type: string
      target-gitops-repository:
        description: Target repository for updating deployment declaration
        type: string
        default: ${{ github.repository }}
      target-gitops-ref:
        description: Target ref for updating deployment declaration
        type: string
        default: ref/heads/master
      gitops-mode:
        description: Mode of updating deployment declaration, pr or commit
        type: string
        default: pr
      push:
        description: Enable pushing the image to the container registry
        type: boolean
        default: true
      update:
        description: Enable updating deployment declaration in the target repository
        type: boolean
        default: true
    secrets:
      GH_TOKEN:
        description: GitHub token used to checkout target repository and open PR
        required: true

jobs:
  build-and-publish-docker-image:
    name: Build and Publish Docker image

    runs-on: ubuntu-latest

    strategy:
      matrix:
        packages: ${{ fromJson(inputs.packages) }}

    outputs:
      DOCKERFILE_EXISTS: ${{ steps.check-dockerfile.outputs.DOCKERFILE_EXISTS }}
      ENVIRONMENT: ${{ steps.get-deploy-environment.outputs.ENVIRONMENT }}

    steps:
      - name: Checkout with tags
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ matrix.packages.ref }}

      - name: Check if Dockerfile exists
        id: check-dockerfile
        run: |
          if [ ! -f apps/${{ matrix.packages.name }}/Dockerfile ]; then
            echo "Dockerfile does not exist"
            echo "DOCKERFILE_EXISTS=false" >> $GITHUB_OUTPUT
          else
            echo "Dockerfile exists"
            echo "DOCKERFILE_EXISTS=true" >> $GITHUB_OUTPUT
          fi

      - name: Cache Docker layers
        uses: actions/cache@v2
        if: steps.check-dockerfile.outputs.DOCKERFILE_EXISTS == 'true'
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Set up Docker Buildx
        if: steps.check-dockerfile.outputs.DOCKERFILE_EXISTS == 'true'
        uses: docker/setup-buildx-action@v2

      - name: Login to Container Registry
        if: steps.check-dockerfile.outputs.DOCKERFILE_EXISTS == 'true'
        uses: docker/login-action@v1
        with:
          registry: ${{ inputs.container-registry }}
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Set frontend env
        if: ${{ matrix.packages.name == 'web' || matrix.packages.name == 'admin-web' }}
        env:
          APP_NAME: ${{ matrix.packages.name }}
          BRANCH: ${{ github.ref_name }}
        run: |
          if [[ $BRANCH == 'main' ]]; then
            echo "$APP_NAME env is set to production"
            mv apps/$APP_NAME/.env.prod apps/$APP_NAME/.env
          elif [[ $BRANCH == 'beta' ]]; then
            echo "$APP_NAME env is set to dev"
            mv apps/$APP_NAME/.env.beta apps/$APP_NAME/.env
          elif [[ $BRANCH == 'dev' ]]; then
            echo "$APP_NAME env is set to beta"
            mv apps/$APP_NAME/.env.dev apps/$APP_NAME/.env
          fi

      - name: Build and push Docker image
        if: steps.check-dockerfile.outputs.DOCKERFILE_EXISTS == 'true'
        uses: docker/build-push-action@v3
        with:
          context: .
          file: apps/${{ matrix.packages.name }}/Dockerfile
          tags: ${{ inputs.container-registry }}/${{ inputs.image-prefix }}/${{ matrix.packages.name }}:${{ matrix.packages.imageTag }}
          push: ${{ inputs.push }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

      - name: Move Docker cache
        if: steps.check-dockerfile.outputs.DOCKERFILE_EXISTS == 'true'
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  update-gitops:
    needs: build-and-publish-docker-image

    if: inputs.update

    uses: ./.github/workflows/update-gitops.yaml
    with:
      packages: ${{ inputs.packages }}
      environment: ${{ inputs.environment }}
      image-prefix: ${{ inputs.image-prefix }}
      gitops-repository: ${{ inputs.target-gitops-repository }}
      gitops-ref: ${{ inputs.target-gitops-ref }}
      container-registry: ${{ inputs.container-registry }}
      mode: ${{ inputs.gitops-mode }}
    secrets:
      GH_TOKEN: ${{ secrets.GH_TOKEN }}
